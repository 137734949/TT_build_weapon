#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# wsf documentation build configuration file, created by
# sphinx-quickstart on Sun Jun  1 12:29:08 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

import sys
import os
import shutil

from sphinx.util import logging

logger = logging.getLogger(__name__)

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/cmake/Modules/sphinx/extensions'))

# Get the output directory from the environment if it exists, else use current directories
out_dir = 'C:/Users/chakanson/Documents/TTCP-2.7.1/TT_build_weapon/documentation'


# -- Project information -----------------------------------------------------

project = 'AFSIM'
copyright = 'Multiple, All Rights Reserved'
author = 'United States Air Force (USAF) + Others'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
# The short X.Y version
version = '2.7'
# The full version, including alpha/beta/rc tags
release = '2.7.1'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.imgmath',
    'sphinx.ext.ifconfig',
    'wsf'
]

additional_sources = ['C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/cmake/Modules/sphinx/extensions']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "docs/site_index"


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
                     '_build',
                     '_static',
                     'extensions',
                     'sphinx_doc',
                     'wsftheme'
]

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'wsftheme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['C:/Users/chakanson/Documents/TTCP-2.7.1/TT_build_weapon/documentation']

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = '%s %s Documentation' % (project, release)

# A shorter title for the navigation bar.  Default is the same as html_title.
html_short_title = 'Site Index'

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = 'C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/cmake/Modules/sphinx/_static/sidebar_logo.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = 'C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/cmake/Modules/sphinx/_static/favicon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/cmake/Modules/sphinx/_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
html_sidebars = {'**': ['wsf_sidebar.html', 'wsf_sidebar_separator.html', 'wsf_sidebar_core.html', 'wsf_sidebar_mystic.html', 'wsf_sidebar_separator.html', 'sourcelink.html', 'searchbox.html']}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
html_use_index = False

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, the reST sources are included in the HTML build as _sources/name. The default is True.
#html_copy_source = True

# If true (and html_copy_source is true as well), links to the reST sources will be added to the sidebar. The default is True.
#html_show_sourcelink = True

# Suffix to be appended to source links (see html_show_sourcelink), unless they have this suffix already. Default is '.txt'.
#html_sourcelink_suffix = '.rst'

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'wsfdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
    # Force figures to not float below text.
    'figure_align': 'H',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'wsf.tex', u'wsf Documentation',
   u'Air Force', 'manual'),
]
#latex_documents = [
# ''
#]

# Additional latex files
#latex_additional_files = ['']

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = ''

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True

primary_domain = 'wsf'


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'wsf', 'wsf Documentation',
     ['Air Force'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'wsf', 'wsf Documentation',
   'Air Force', 'wsf', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


docDirectory = "%s/docs"%(out_dir)              # dump location for documentation files
#imgDirectory = "%s/docs/images"%(out_dir)      # dump location for image files
#slidesDirectory = "%s/docs/slides"%(out_dir)   # dump location for powerpoint slide files
#eventDirectory = "%s/docs/event"%(out_dir)     # dump location for event output files
#scriptDirectory = "%s/docs/script"%(out_dir)   # dump location for script output files
indexFile = "%s/docs/_imported_docs"%(out_dir)  # file for indexing built documentation

# -------------------------------------------------------------------------
# START: Place all documentation and images in one file for easy building
# -------------------------------------------------------------------------

# adds the :orphan: tag to the beginning of each .rst file
def copyOrphanFile(srcPath, destPath):
   # read the contents of the orignial file
   origFile = open(srcPath,'r')
   origFileText = origFile.read()
   origFile.close()

   # create the destination file with :orphan: tag
   newFile = open(destPath,'w')
   newFile.write(":orphan:\n\n")

   # write the contents of the original file
   newFile.write(origFileText)
   newFile.close()

oldExtDocs = set()
newExtDocs = set()

# create docs directories
if not os.path.exists(docDirectory):
   os.makedirs(docDirectory)
#if not os.path.exists(imgDirectory):
#   os.makedirs(imgDirectory)
#if not os.path.exists(slidesDirectory):
#   os.makedirs(slidesDirectory)
#if not os.path.exists(eventDirectory):
#   os.makedirs(eventDirectory)
#if not os.path.exists(scriptDirectory):
#   os.makedirs(scriptDirectory)

# read _imported_docs if it exists
try:
   oldExtDocs = set([l.strip() for l in open(indexFile, 'r').readlines()])
except:
   pass

path = 'C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/doc;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/core/wsf;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mission;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/plugins/CoverageOverlay;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/plugins/MapDisplay;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/plugins/MapHoverInfo;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/plugins/ModelBrowser;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/plugins/Performance;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/core;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/tools/wkf/common;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/lib;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultCoverageOverlay;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultMapDisplay;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultMapHoverInfo;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultModelBrowser;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultPerformance;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultAuxData;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultBattleManagement;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/plugins/ResultWeaponMetrics;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/mystic/exec;C:/Users/chakanson/Documents/TTCP-2.7.1/AFSIM_TTCP_2.7.1-Dev/cmake/Modules/sphinx;'
path = path.replace(';', ' ')
path = path.split()
# print(' Python Directory List:', path)
for extdir in path:
   for root, dirnames, filenames in os.walk(extdir):
      # check if folder is interesting
      if 'doc' in root and '_build' not in root and 'docs' not in root:
         print('Processing directory: ', root)

         for filename in filenames:
            #print('Processing filename: ', filename)
            if filename.lower() != "thumbs.db":
               srcPath = os.path.join(root, filename)
               # destination filepaths are different for docs, images slides, script and event
               if not os.path.basename(root).endswith('doc'):
                  if  filename.startswith('_') and filename.endswith('.txt'):
                     project = os.path.split(os.path.split(os.path.dirname(root))[0])[1]
                     #print('Project1: ', project)
                     (name, ext) = os.path.splitext(filename)
                     filename = ".".join([name, project, 'txt'])
                  subDir = "%s/%s"%(docDirectory, os.path.basename(root))
                  #subDir = "%s/%s"%(docDirectory, root.rsplit('doc', 1)[1].lstrip('\\/'))
                  if not os.path.exists(subDir):
                     os.makedirs(subDir)
                  destPath = os.path.join(subDir, filename)
                  #print('destPath: ', destPath)
               #elif root.endswith('images'):
               #   destPath = os.path.join(imgDirectory, filename)
               #elif root.endswith('slides'):
               #   destPath = os.path.join(slidesDirectory, filename)
               #elif root.endswith('event'):
               #   if  filename.startswith('_') and filename.endswith('.txt'):
               #      project = os.path.split(os.path.dirname(os.path.split(os.path.dirname(root))[0]))[1]
               #      #print('Project: ', project)
               #      (name, ext) = os.path.splitext(filename)
               #      filename = ".".join([name, project, 'txt'])
               #   destPath = os.path.join(eventDirectory, filename)
               #elif root.endswith('script'):
               #   if  filename.startswith('_') and filename.endswith('.txt'):
               #      project = os.path.split(os.path.dirname(os.path.split(os.path.dirname(root))[0]))[1]
               #      #print('Project: ', project)
               #      (name, ext) = os.path.splitext(filename)
               #      filename = ".".join([name, project, 'txt'])
               #   destPath = os.path.join(scriptDirectory, filename)
               else:
                  if  filename.startswith('_') and filename.endswith('.txt'):
                     project = os.path.split(os.path.dirname(root))[1]
                     #print('Project2: ', project)
                     (name, ext) = os.path.splitext(filename)
                     filename = ".".join([name, project, 'txt'])
                  destPath = os.path.join(docDirectory, filename)
               relPath = os.path.relpath(os.path.dirname(destPath), docDirectory)
               relFilePath = os.path.join(relPath, filename).lstrip('.\\/')
               relFilePath = relFilePath.replace('\\','/')
               #print('relFilePath: ', relFilePath)
               if relFilePath in newExtDocs:
                  # this file has already been processed from another source
                  pass
               else:
                  if relFilePath in oldExtDocs:
                     oldExtDocs.remove(relFilePath)
                     newExtDocs.add(relFilePath)
                     # check if file has been updated since last build
                     if os.stat(srcPath).st_mtime - os.stat(destPath).st_mtime > 1:
                        if filename.endswith('.rst'):
                           copyOrphanFile(srcPath, destPath)
                        else:
                           shutil.copy2(srcPath, destPath)
                  else:
                     if not os.path.exists(destPath):
                        newExtDocs.add(relFilePath)
                        if filename.endswith('.rst'):
                           copyOrphanFile(srcPath, destPath)
                        else:
                           shutil.copy2(srcPath, destPath)
# empty oldExtDocs set
for oldDoc in oldExtDocs:
   srcFilename = os.path.join(docDirectory, oldDoc)
   if os.path.exists(srcFilename):
      os.remove(srcFilename)

for newDoc in newExtDocs:
   newDocName = newDoc
   newDocPath = ''
   if '/' in newDoc:
      (newDocPath, newDocName) = os.path.split(newDoc)
   if  newDocName.startswith('_') and newDocName.endswith('.txt'):
      (name, ext) = os.path.splitext(newDocName)
      (name, project) = os.path.splitext(name)
      #project = project.lstrip('.')
      srcfilename = ".".join([name.lstrip('_'), 'rst'])
      srcfile = os.path.join(docDirectory, newDocPath, srcfilename)
      if not os.path.exists(srcfile):
         srcfilename = ".".join([name.lstrip('_'), 'txt'])
         srcfile = os.path.join(docDirectory, newDocPath, srcfilename)
      if os.path.exists(srcfile):
         found = 0
         includeStr = " ".join(['..', 'include::', newDocName])
         with open(srcfile, 'r') as f:
            for line in f:
               if includeStr in line:
                  found = 1
            f.close()
         if found < 1:
            with open(srcfile, 'a') as f:
               f.write("".join(['\n', includeStr]))
               f.close()
      else:
         logger.warning("".join(['Matching rst file not found for: ', newDoc]))

# update file listing in _imported_docs
with open(indexFile, 'w') as f:
   f.write('\n'.join(list(newExtDocs)))

# -------------------------------------------------------------------------
# END: Place all documentation in one file location for easy building
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
# START: Create a complete site index
# -------------------------------------------------------------------------

def getRSTFileSet():
   try:
      completeFileSet = set([l.strip() for l in open(indexFile, 'r').readlines()])
   except:
      pass

   for thisFile in completeFileSet:
      if thisFile.endswith('.rst'):
         rstFileSet.add(thisFile)
         jumpboxLetters.add(thisFile[0].upper())

def insertHeader():
   site_index.write(":orphan:")
   site_index.write("\n\n")
   site_index.write(site_index_title)
   site_index.write("\n")
   for i in site_index_title:
      site_index.write("-")
   site_index.write("\n\n")

def insertJumpbox():
   first = True
   for thisLetter in sorted(jumpboxLetters, key=lambda s: s.lower()):
      if first: first = False
      else: site_index.write("\| ")
      site_index.write(thisLetter + "_ ")
   site_index.write("\n\n")

def buildSiteIndex():
   for thisLetter in sorted(jumpboxLetters, key=lambda s: s.lower()):
      site_index.write(thisLetter)
      site_index.write("\n")
      site_index.write("=")
      site_index.write("\n\n")
      site_index.write(".. container:: indexcontainer")
      site_index.write("\n\n")
      site_index.write("   .. hlist::")
      site_index.write("\n\n")
      for thisFile in sorted(rstFileSet, key=lambda s: s.lower()):
         thisPath = ''
         if '/' in thisFile:
            (thisPath, thisFile) = thisFile.rsplit('/')
            thisPath = thisPath
            if thisPath.lower().startswith(thisLetter.lower()):
               site_index.write("      * :doc:`" + thisPath.upper() + ": " + thisFile[:-4] + "<" + thisPath + "/" + thisFile[:-4] + ">`")
               site_index.write("\n")
         elif thisFile.lower().startswith(thisLetter.lower()):
            site_index.write("      * :doc:`" + thisFile[:-4] + "`")
            site_index.write("\n")
      site_index.write("\n")

rstFileSet = set()
jumpboxLetters = set()
site_index_title = "Site Index"
site_index = open(os.path.join(docDirectory, site_index_title.replace(' ', '_').lower() + ".rst"), 'w')

getRSTFileSet()
insertHeader()
insertJumpbox()
buildSiteIndex()
site_index.close()

# -------------------------------------------------------------------------
# END: Create a complete site index
# -------------------------------------------------------------------------

