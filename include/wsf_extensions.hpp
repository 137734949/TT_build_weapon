// ****************************************************************************
// UNCLASSIFIED//FOUO
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Distribution authorized to the Department of Defense and U.S. DoD contractors
// REL AUS, CAN, UK, NZ. You may not use this file except in compliance with the
// terms and conditions of 48 C.F.R. 252.204-7000 (Disclosure of Information),
// 48 C.F.R. 252.227-7025 (Limitations on the Use or Disclosure of Government-
// Furnished Information Marked with Restrictive Legends), and the AFSIM
// Memorandum of Understanding or Information Transfer Agreement as applicable.
// All requests for this software must be referred to the Air Force Research
// Laboratory Aerospace Systems Directorate, 2130 8th St., Wright-Patterson AFB,
// OH 45433. This software is provided "as is" without warranties of any kind.
//
// This information is furnished on the condition that it will not be released
// to another nation without specific authority of the Department of the Air Force
// of the United States, that it will be used for military purposes only, that
// individual or corporate rights originating in the information, whether patented
// or not, will be respected, that the recipient will report promptly to the
// United States any known or suspected compromise, and that the information will
// be provided substantially the same degree of security afforded it by the
// Department of Defense of the United States. Also, regardless of any other
// markings on the document, it will not be downgraded or declassified without
// written approval from the originating U.S. agency.
//
// WARNING - EXPORT CONTROLLED
// This document contains technical data whose export is restricted by the
// Arms Export Control Act (Title 22, U.S.C. Sec 2751 et seq.) or the Export
// Administration Act of 1979, as amended, Title 50 U.S.C., App. 2401 et seq.
// Violations of these export laws are subject to severe criminal penalties.
// Disseminate in accordance with provisions of DoD Directive 5230.25.
// ****************************************************************************
// Extension configuration file.
//
// This file provides a mechanism to register the standard extensions and any optional extensions that
// are included in the build package. It is typically included by the main file of an application.
//
// This file contains two main methods:
//
// -) RegisterBuiltinExtensions. This will register the standard extensions that are included with WSF:
//       air_traffic
//       csv_event_output
//       dis_interface
//       event_output
//       event_pipe
//       ext_interface
//       grammar_interface
//       osm_traffic
//       road_traffic
//       sea_traffic
//       wsf_draw
//
// -) RegisterOptionalExtensions. This will register any and all optional extensions that are included
//    in the build package.
//
// To use this file, the main application does something like:
//
//    #include "wsf_extensions.hpp"
//      ...
//    int main(int argc, char* argv[])
//    {
//       WsfApplication app;
//       RegisterBuiltinExtensions(app);
//       RegisterOptionalExtensions(app);
//       ...
//    }
//
// An application can request that specific extensions be excluded because they are needed by the
// application. In this case preprocessor directives may be defined BEFORE including this file which
// will indicate that specific extensions should be excluded.
//
//    #define WSF_EXCLUDE_EXTENSION_<name>
//    ... repeat as necessary ...
//    #include "wsf_extensions.hpp"
//
// For example, to exclude all of the 'traffic' extensions:
//
//    #define WSF_EXCLUDE_EXTENSION_air_traffic
//    #define WSF_EXCLUDE_EXTENSION_road_traffic
//    #define WSF_EXCLUDE_EXTENSION_sea_traffic
//    #include "wsf_extensions.hpp"
//
// There is no harm in excluding an extension that in not included in the build package.

#include "UtLog.hpp"

#include "WsfApplication.hpp"

static void PrintOptionalExtensionIncluded(const std::string& aName, ut::log::MessageStream& aStream)
{
   static bool firstEntry = true;
   if (!firstEntry)
   {
      aStream << ", ";
   }
   firstEntry = false;
   aStream << aName;
}

//! Register optional extensions
//! @param aApplication The application object.
static void RegisterOptionalExtensions(WsfApplication& aApplication)
{
   auto out = ut::log::info() << "Extensions Included: ";
   auto listNote = out.AddNote();
   
   // WARNING: This code is generated by CMake.  Do not hand-edit.

}

//! Register extensions that are built-in to WSF.
//! An application which wishes to use all available extensions can call this method.
//! @param aApplication The application object.
static void RegisterBuiltinExtensions(WsfApplication& aApplication)
{
#if !defined(WSF_EXCLUDE_EXTENSION_air_traffic)
   WSF_REGISTER_EXTENSION(aApplication, air_traffic);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_csv_event_output)
   WSF_REGISTER_EXTENSION(aApplication, csv_event_output);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_dis_interfacee)
   WSF_REGISTER_EXTENSION(aApplication, dis_interface);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_event_output)
   WSF_REGISTER_EXTENSION(aApplication, event_output);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_event_pipe)
   WSF_REGISTER_EXTENSION(aApplication, event_pipe);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_ext_interface)
   WSF_REGISTER_EXTENSION(aApplication, ext_interface);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_grammar_interface)
   WSF_REGISTER_EXTENSION(aApplication, grammar_interface);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_osm_traffic)
   WSF_REGISTER_EXTENSION(aApplication, osm_traffic);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_road_traffic)
   WSF_REGISTER_EXTENSION(aApplication, road_traffic);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_sea_traffic)
   WSF_REGISTER_EXTENSION(aApplication, sea_traffic);
#endif
#if !defined(WSF_EXCLUDE_EXTENSION_wsf_draw)
   WSF_REGISTER_EXTENSION(aApplication, wsf_draw);
#endif
}
